require './lib/park'
require './lib/vehicle'
require './lib/passenger'

RSpec.describe Park do

    it 'exists' do
        park = Park.new("Great Sand Dunes", 30)

        expect(park)to be_a(Park)
    end

    it "has attributes" do
        park = Park.new("Great Sand Dunes", 30)

        expect(park.name).to eq("Great Sand Dunes")
        expect(park.admission_price).to eq(30)
    end

    it 'can admit vehicles' do
        park = Park.new("Great Sand Dunes", 30)
        vehicle1 = Vehicle.new("2001", "Honda", "Civic")
        vehicle2 = Vehicle.new("2012", "Toyota", "Tacoma")

        expect(park.vehicles).to eq([]) #testing default empty here
        
        park.admit_vehicle(vehicle1)
        park.admit_vehicle(vehicle2)

        expect(park.vehicles).to eq([vehicle1, vehicle2])
    end

    it 'can list all passengers that entered the park' do
        park = Park.new("Great Sand Dunes", 30)
        vehicle1 = Vehicle.new("2001", "Honda", "Civic")
        vehicle2 = Vehicle.new("2012", "Toyota", "Tacoma")
        charlie = Passenger.new({"name" => "Charlie", "age" => 18})
        jude = Passenger.new({"name" => "Jude", "age" => 20})
        taylor = Passenger.new({"name" => "Taylor", "age" => 12})

        vehicle1.add_passenger(charlie) #assigning passengers to vehicles
        vehicle2.add_passenger(jude)
        vehicle2.add_passenger(taylor)

        park.admit_vehicle(vehicle1) #admiting vehicles
        park.admit_vehicle(vehicle2)

        expect(park.all_passengers).to eq(charlie, jude, taylor)
    end

    it 'can calculate revenue generated by adults' do
        park = Park.new("Great Sand Dunes", 30)
        vehicle1 = Vehicle.new("2001", "Honda", "Civic")
        vehicle2 = Vehicle.new("2012", "Toyota", "Tacoma")
        charlie = Passenger.new({"name" => "Charlie", "age" => 18})
        jude = Passenger.new({"name" => "Jude", "age" => 20})
        taylor = Passenger.new({"name" => "Taylor", "age" => 12})

        vehicle1.add_passenger(charlie) #assigning passengers to vehicles
        vehicle2.add_passenger(jude)
        vehicle2.add_passenger(taylor)

        park.admit_vehicle(vehicle1) #admiting vehicles
        park.admit_vehicle(vehicle2)

        expect(park.revenue).to eq(60)
    end
end